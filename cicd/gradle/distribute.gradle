apply plugin: 'maven-publish'

/*
 * Zip up the compiled web app that was generated by npm build
 */
task dist(type: Zip) {
    println "projectDir: " + projectDir

    archiveName = "${archivesBaseName}.zip"

    //from ("${projectDir}/../node_modules/@nt/xps-node") {
    //  include 'server.js', 'node_modules/**/*', 'package.json', 'yarn.lock', 'package-lock.json'
    //}

    from (projectDir) {
      include 'nginx/**/*', 'Staticfile'
    }

    from ("${projectDir}/../") {
        include 'build/**/*'
        //include 'build/**/*'
    }

    //from ("${projectDir}/../build/xps") {
    //  include 'index.handlebars'
    //  rename { "build/index.handlebars" }
    //}

    //from ("${projectDir}/../build/xps") {
    //  include 'index.html'
    //  rename { "build/index.html" }
    //}
}

/*
 * Create zip file containing the web application and its manifest file
 */
task createArchive(type: Zip, dependsOn: dist) {
    from dist
    from("${projectDir}/manifest.yml", {
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [deployableArtifactName: dist.archiveName])
        filteringCharset = 'UTF-8'
    })
    println "Create Archive " + createArchive.archiveName
}

/*
 * Caramel deployment task
 */
task push(type:Exec, dependsOn: createArchive) {
  group = "CARAMEL"
  doFirst {
    println 'Executing CARAMEL Deploy to PCF System'
    if("${System.env.buildEnv}" == "system") {
      commandLine "sh", "./caramel.sh"
    } else {
        throw new GradleException("Not deploying with CARAMEL. Bamboo environment variable 'buildEnv' = 'system' is missing.")
    }
  }
}

publishing {
    publications {
        reactStarter(MavenPublication) {
            artifact createArchive {
                artifactId archivesBaseName
            }
        }
        println "Publication Version" + reactStarter.version
        println "Publication Artifact ID " + reactStarter.artifactId
        println "Publication Group ID " + reactStarter.groupId
        println "Publication Artifact File Name " + reactStarter.artifacts.iterator()[0].file.name
    }

    repositories {
        maven {
            name 'nexus'
            url = (project.hasProperty('isRelease') && project.getProperty('isRelease').toBoolean()) ? nexusReleaseUrl : nexusSnapshotsUrl

            credentials {
                username = "${System.env.NEXUSUSER}"
                password = "${System.env.NEXUSPASS}"
            }
        }
    }
}